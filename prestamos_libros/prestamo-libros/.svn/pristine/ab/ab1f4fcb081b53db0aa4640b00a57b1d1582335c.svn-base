package com.ipartek.formacion.prestamolibros.model;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.ArrayList;

import com.ipartek.formacion.prestamolibros.pojo.Editorial;
import com.ipartek.formacion.prestamolibros.pojo.Libro;

public class LibroDAO {
	private static LibroDAO INSTANCE = null;

	private LibroDAO() {
		super();
	}

	public static synchronized LibroDAO getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new LibroDAO();
		}
		return INSTANCE;
	}

	public ArrayList<Libro> libroGetAll() {
		ArrayList<Libro> libros = new ArrayList<Libro>();
		Libro libro = null;
		String sql = "{CALL `libroGetAll`())}";
		try (Connection con = ConnectionManager.getConnection(); CallableStatement cs = con.prepareCall(sql);) {

			try (ResultSet rs = cs.executeQuery()) {
				while (rs.next()) {
					libro = new Libro();
					libro.setId(rs.getLong("id"));
					libro.setTitulo(rs.getString("titulo"));
					libro.setIsbn(rs.getString("isbn"));
					
					Editorial editorial= new Editorial();
					editorial.setId(rs.getLong("id_tipo_editorial"));
					editorial.setEditorial(rs.getString("editorial"));
					
					libro.setEditorial(editorial);
	
					
					libros.add(libro);

				}
			}
		} catch (Exception e) {
			e.printStackTrace();

		}

		return libros;

	}

	public Libro libroGetById(long id) {
		Libro libro = null;
		String sql = "{CALL `libroGetById`(?)}";
		try (Connection con = ConnectionManager.getConnection(); CallableStatement cs = con.prepareCall(sql);) {
			cs.setLong(1, id);
			try (ResultSet rs = cs.executeQuery()) {

				while (rs.next()) {
					libro = new Libro();
					libro.setId(rs.getLong("id"));
					libro.setIsbn(rs.getString("isbn"));
					libro.setTitulo(rs.getString("titulo"));
					
					Editorial editorial= new Editorial();
					editorial.setId(rs.getLong("id_tipo_editorial"));
					editorial.setEditorial(rs.getString("editorial"));
					
					libro.setEditorial(editorial);
					

				}
			}
		} catch (Exception e) {
			e.printStackTrace();

		}

		return libro;

	}

	public boolean libroInsert(String titulo,String isbn,long idEditorial) {
		boolean resul = false;
		String sql = "{CALL `editorialInsert`(?, ?)}";
		Libro libro = new Libro();
		int id;

		try (Connection con = ConnectionManager.getConnection(); CallableStatement cs = con.prepareCall(sql);) {
			cs.setString(1, titulo);
			cs.registerOutParameter("o_id", Types.INTEGER);

			cs.execute();
			id = cs.getInt("o_id");
			libro.setId(id);
			libro.setTitulo(titulo);
			libro.setIsbn(isbn);
			
			
			Editorial editorial= new Editorial();
			editorial.setId(idEditorial);
			editorial.setEditorial(EditorialDAO.getInstance().editorialGetById(id).getEditorial());
			
			libro.setEditorial(editorial);


		} catch (Exception e) {
			e.printStackTrace();
		}
		return resul;

	}

	public boolean libroUpdate(long id, String titulo,String isbn,long idEditorial) throws Exception {
		boolean resul = false;
		String sql = "{CALL `libroUpdate`(?,?,?,?)}";
		try (Connection con = ConnectionManager.getConnection(); CallableStatement cs = con.prepareCall(sql);) {

			
			cs.setString(1, titulo);
			cs.setString(2, isbn);
			cs.setLong(3, idEditorial);
			cs.setLong(4, id);

			if (cs.executeUpdate() == 1) {
				resul = true;
			}

		}
		return resul;
	}

	public boolean libroDelete(long id) throws Exception {
		boolean resul = false;
		String sql = "{CALL editorialDelete (?)}";
		try (Connection con = ConnectionManager.getConnection(); CallableStatement cs = con.prepareCall(sql);) {

			cs.setLong(1, id);
			if (cs.executeUpdate() == 1) {
				resul = true;
			}

		}
		return resul;
	}
}
